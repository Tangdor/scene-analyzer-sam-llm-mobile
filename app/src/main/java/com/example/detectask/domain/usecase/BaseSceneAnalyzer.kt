package com.example.detectask.domain.usecase

/**
 * Abstract base class for scene analysis logic.
 *
 * Provides shared utility functionality for subclasses, such as text trimming
 * and storage of the most recent scene summary.
 */
abstract class BaseSceneAnalyzer {

    /**
     * Stores the most recent summary generated by a scene analysis.
     */
    protected var lastSceneSummary: String = ""

    /**
     * Trims a given [text] to a maximum number of characters, preserving sentence boundaries if possible.
     *
     * If the [text] exceeds [maxChars], it is shortened to the last full sentence that fits
     * within the limit. Sentence boundaries are detected via `.`, `!`, `?`, or newline characters.
     *
     * @param text The input text to be trimmed.
     * @param maxChars The maximum number of characters allowed in the result.
     * @return A trimmed version of the input, preferably ending at a sentence boundary.
     */
    protected fun safelyTrim(text: String, maxChars: Int): String {
        if (text.length <= maxChars) return text
        val trimmed = text.take(maxChars)
        val lastStop = trimmed.lastIndexOfAny(charArrayOf('.', '!', '?', '\n'))
        return if (lastStop != -1) trimmed.take(lastStop + 1) else trimmed
    }
}
